<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="org.python.pydev.editor.templates.python.modules" deleted="false" description="Droned Service template" enabled="true" name="Droned Service">###############################################################################&#13;
#   Copyright 2011 Orbitz Worldwide&#13;
#&#13;
#   Licensed under the Apache License, Version 2.0 (the "License");&#13;
#   you may not use this file except in compliance with the License.&#13;
#   You may obtain a copy of the License at&#13;
#&#13;
#       http://www.apache.org/licenses/LICENSE-2.0&#13;
#&#13;
#   Unless required by applicable law or agreed to in writing, software&#13;
#   distributed under the License is distributed on an "AS IS" BASIS,&#13;
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#13;
#   See the License for the specific language governing permissions and&#13;
#   limitations under the License.&#13;
#  ${date}&#13;
# @author: ${user}&#13;
# module name: ${module}&#13;
###############################################################################&#13;
&#13;
#api requirements&#13;
${current_class}&#13;
SERVICENAME = '${module_shortname}'&#13;
SERVICECONFIG = {}&#13;
&#13;
__doc__ = """&#13;
&lt;your sevice doc here&gt;&#13;
"""&#13;
&#13;
from twisted.python.log import msg, err&#13;
from twisted.python.failure import Failure&#13;
from twisted.internet import defer, task&#13;
from twisted.application.service import Service&#13;
from droned.logging import logWithContext&#13;
from droned.models.${module_shortname} import &lt;your model data&gt;&#13;
from droned.protocols.${module_shortname} import &lt;your protocols&gt;&#13;
import time&#13;
&#13;
log = logWithContext(type=SERVICENAME)&#13;
&#13;
class ${module_shortname}(Service):&#13;
    writing = defer.succeed(None)&#13;
    protocol = &lt;your protocol here&gt;&#13;
    &#13;
    def valid_start_parameters(self):&#13;
        '''this method ensure all minimum start parameters have been provided.&#13;
           should return true on success&#13;
        '''&#13;
        return False&#13;
     	&#13;
    def setup_task(self):&#13;
    	'''returns a periodic task this class may choose to perform.&#13;
       	  default is a do-nothing method.&#13;
    	'''&#13;
    	return task.LoopingCall(self.noop)&#13;
      &#13;
    def noop(self): pass&#13;
    &#13;
    def startService(self):&#13;
        log('${module_shortname} Service Starting')&#13;
        if self.validate_start_parameters():&#13;
            self._task = self.setup_task()&#13;
            self._task.start(60.0)&#13;
            Service.startService(self)&#13;
&#13;
    def stopService(self):&#13;
        log('${module_shortname} Service Stopping')&#13;
        if self._task.running: self._task.stop()&#13;
        else: return&#13;
        Service.stopService(self)&#13;
&#13;
# module state globals&#13;
parentService = None&#13;
service = None&#13;
&#13;
###############################################################################&#13;
# API Requirements&#13;
###############################################################################&#13;
def install(_parentService):&#13;
    global parentService&#13;
    parentService = _parentService&#13;
&#13;
def start():&#13;
    global service&#13;
    if not running():&#13;
        service = ${module_shortname}()&#13;
        service.setName(SERVICENAME)&#13;
        service.setServiceParent(parentService)&#13;
&#13;
def stop():&#13;
    global service&#13;
    if running():&#13;
        service.stopService()&#13;
        service.disownServiceParent()&#13;
        service = None&#13;
&#13;
def running():&#13;
    return bool(service) and service.running&#13;
&#13;
__all__ = ['install', 'start', 'stop', 'running']</template></templates>